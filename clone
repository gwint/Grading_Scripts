#!/usr/bin/python3

import re
import os
import sys
import subprocess
import csv
from argparse import ArgumentParser
from dotenv import load_dotenv

load_dotenv()

COMMIT_HASHS_DIR = os.getenv("COMMIT_HASHES_FOLDER_PATH")
STUDENT_INFO_FILE = "githubinfo.csv"

def getBNumberToHashMapping():
    bNumberRegex = re.compile(r'(b)([0-9]{8})')
    commitHashRegex = re.compile(r'[a-z0-9]{40}')

    nameToHashMapping = {}

    for filename in os.listdir(COMMIT_HASHS_DIR):
        with open(f'{COMMIT_HASHS_DIR}/{filename}', 'r') as commitFileObj:
            text = commitFileObj.read()

            bNumberMatches = bNumberRegex.search(text)
            hashMatches = commitHashRegex.search(text)

            if hashMatches:
               nameToHashMapping[bNumberMatches.group().lower()] = hashMatches.group()

    return nameToHashMapping

def getStudentInfo():
    bNumberToInfoMapping = {}
    with open(STUDENT_INFO_FILE, 'r') as csvFile:
        csvReader = csv.DictReader(csvFile)
        for row in csvReader:
            studentName = f'{row["firstname"]} {row["lastname"]}'
            studentId = row["userid"]
            githubUsername = row["githubusername"]
            bnumber = row["bnumber"].lower()

            bNumberToInfoMapping[bnumber] = {"githubusername": githubUsername, \
                                             "userid": studentId, \
                                             "fullname": studentName}

    return bNumberToInfoMapping

def getRepositoryName(assignmentName, githubUsername):
    return f'{assignmentName}-{githubUsername}'

def getRepositoryUrl(organizationName, assignmentName, githubUsername):
    repoName = getRepositoryName(assignmentName, githubUsername)

    return f'http://github.com/{organizationName}/{repoName}.git'

def main():
    studentsWoGithubs = []
    studentsWoCommitHash = []

    bNumberToInfoMapping = getStudentInfo()
    bNumberToHashMapping = getBNumberToHashMapping()

    parser = ArgumentParser()
    parser.add_argument("assn_name", type=str, nargs=1)
    parser.add_argument("-organization_name", type=str, nargs=1)

    args = parser.parse_args()
    assnName = args.assn_name[0]

    organizationName = "Binghamton-CS140-A0-Spring-2019"

    if args.organization_name:
        organizationName = args.organization_name[0]

    os.system(f'mkdir {assnName}')
    numReposCloned = 0

    for bNumber in bNumberToInfoMapping:
        githubUsername = bNumberToInfoMapping[bNumber]["githubusername"]

        if not githubUsername:
            continue

        fullStudentName = bNumberToInfoMapping[bNumber]["fullname"]

        repositoryName = getRepositoryName(assnName, githubUsername.strip())
        repositoryUrl = getRepositoryUrl(organizationName, assnName, githubUsername.strip())

        os.system(f'echo {"-"*40} {fullStudentName} {"-"*40}')

        cloneResponse = os.system(f'git clone {repositoryUrl}')
        if cloneResponse != 0:
    	    continue

        binghamtonUserID = bNumberToInfoMapping[bNumber]["userid"]

        response = subprocess.Popen(["mkdir", binghamtonUserID])
        response.wait()
        response = subprocess.Popen(["mv", repositoryName, binghamtonUserID])
        response.wait()
        response = subprocess.Popen(["mv", binghamtonUserID, assnName])
        response.wait()

        if bNumber in bNumberToHashMapping:
            hash = bNumberToHashMapping[bNumber]
            directoryInWhichToRunCommand = f'{assnName}/{binghamtonUserID}/{repositoryName}'
            print(directoryInWhichToRunCommand)

            response = subprocess.Popen(["git", "checkout", hash], \
                                 cwd = directoryInWhichToRunCommand, \
                                 shell=False)
            response.wait()
        else:
            studentsWoCommitHash.append(bNumber)

        numReposCloned += 1

    print(f'Successfully cloned repos from {numReposCloned} students.')

    print(f'{len(studentsWoCommitHash)} have no commit hash on file so the most recent commit is used.')
    print([bNumberToInfoMapping[bNumber]["fullname"] for bNumber in studentsWoCommitHash])

main()
